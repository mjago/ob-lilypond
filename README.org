* Emacs Org Babel LilyPond Mode
** Purpose
Allow LilyPond Score Generation to take place within Emacs Org-mode
using literate programming principles.
** Examples
Several examples are included
*** Modal Cycles (Utilises org-babel and noweb to generate notes)
      - [[https://github.com/mjago/ob-lilypond/blob/master/song/Modal-Cycle/modal-cycle.pdf?raw=true][Generated Score]]
      - [[https://github.com/mjago/ob-lilypond/blob/master/song/Modal-Cycle/modal-cycle.midi?raw=true][Generated Midi File]]
*** Modal Cycles 2 (Utilises org-babel and noweb to generate notes)
      - [[https://github.com/mjago/ob-lilypond/blob/master/song/Modal-Cycle-2/modal-cycle-2.pdf?raw=true][Generated Score]]
      - [[https://github.com/mjago/ob-lilypond/blob/master/song/Modal-Cycle-2/modal-cycle-2.midi?raw=true][Generated Midi File]]
*** Modes in the Key of C (another example of polyglot lilypond programming)
      - [[https://github.com/mjago/ob-lilypond/blob/master/song/Modes-in-Key-of-C/modes-in-key-of-c.pdf?raw=true][Generated Score]]
      - [[https://github.com/mjago/ob-lilypond/blob/master/song/Modes-in-Key-of-C/modes-in-key-of-c.midi?raw=true][Generated MIDI File]]
** Features
 - Optional Automated LilyPond Compilation following the "Tangling"
  of a "Literate Org LilyPond" file
 - Optional Automated display of resultant Musical Score following compilation
 - Optional Automated playing of the resultant MIDI file following compilation
 - Highlights syntax errors in Org file following a failed compilation
 - Integrates with LilyPond-Mode
 - Cross-Platform (OSX, nix, win32)
** Usage
*** Compiling lilypond source
Hitting 'C-c C-c' within a lilypond block initiates ly-tangle (tangling of all
lilypond blocks). Depending on the feature settings, ob-lilypond will 
then either display a pdf of the score, play the generated midi file,
both, or neither. 

'M-x ly-tangle' can also be called from anywhere in the file
and can be tied to a function key with something like...

#+begin_src emacs-lisp

 (global-set-key [f8] 'ly-tangle)

#+end_src

*** Commands

Some commands are included to quickly disable / enable certain post-tangle
activities...
 - ly-toggle-midi-play (toggle whether midi will be played following a successful compilation)
 - ly-toggle-pdf-display (toggle whether pdf will be displayed following a successful compilation)

NOTE:- If using Timidity for midi playback, kill the midi stream with 
C-g in Emacs
** Setup (add to emacs init file)
*** Cloning ob-lilypond

The Files need to be downloaded to your relevant dotfiles directory...

#+BEGIN_SRC sh

git clone https://github.com/mjago/ob-lilypond.git ob-lilypond

#+END_SRC

*** Emacs Initialisation file setup 

Require library...
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path
             (concat dotfiles-dir  "ob-lilypond/lib"))
(require 'ob-lilypond)

#+END_SRC

Add lilypond to your list of babel languages...

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((ruby . t)
   (C . t)
   (emacs-lisp . t)
   (sh t)
   (dot t)
   (clojure t)
   (ditaa t)
   (lilypond t)
   ))

#+END_SRC
 
** Requirements
*** Mac OS X
 - [[http://lilypond.org/][Lilypond]] can be obtained [[http://lilypond.org/][here]]

*** nix
 - [[http://lilypond.org/][Lilypond]] is available [[http://lilypond.org/][here]] or via the the package manager
 - For MIDI, [[http://timidity.sourceforge.net/][Timidity]] is available [[http://timidity.sourceforge.net/][here]] or via the package manager
 - For PDF, [[http://live.gnome.org/Evince/Downloads][Evince]] is available [[http://live.gnome.org/Evince/Downloads][here]] or via package manager

*** Win32
 - Currently untested

** Testing
Tests are provided and can be run by opening
test/ob-lilypond-tests.org and running the following commands...

 - M-x eval-buffer (within ob-lilypond-tests.org
 - M-x ert (t) 

Tests are run automatically on source/test file save if ly-project
(below) has been executed

** Development
Included also is dev/ob-lilypond.org which includes various helper
commands used for development, and the development todo list
 - ly-project (code block - evaluate with C-c C-c and execute M-x ly-project) 
   - load appropriate files
   - set up windows
   - setup project development environment
   - add continuous testing post-save hook
   - map F4 to switch between src or test files to control file (dev/ob-lilypond.org)
   - map F8 to 'ly-dev-tangle (tangle test/test-build/test.org file from anywhere)
 - Remove post-save-hook code block
 - Development todo list

