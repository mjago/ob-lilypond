
* ob-lilypond
** Stages
*** DONE Get something working ish! 
*** DONE Decide directory Structure
*** DONE Decide LilyPond-mode and lilypond-hook integration wrt ob-lilypond
Use seperate hook in ob-lilypond to auto draw / play under preferences
*** DONE Get correct basename on build files
*** DONE Add ob-ly-compile-post-tangle user variable (default t)
If ob-ly-compile-post-tangle flag set compile tangled file
Use defvar rather than defcustom for now

*** DONE Add ob-ly-draw-pdf-post-tangle  user variable (default t)
If ob-ly-draw-pdf-post-tangle is true draw pdf of tangled ly file given the
compilation didn't fail.
Use defvar rather than defcustom for now

*** DONE Add ob-ly-play-midi-post-tangle user variable (default t)
If ob-ly-play-midi-post-tangle is true play generated midi file of tangled ly file given the
compilation didn't fail.
Use defvar rather than defcustom for now
*** DONE Test whether we need to explicitly check for 
    existance of pdf and MIDI files before auto display or play
Done with warnings if lilypond doesn't generate
*** DONE Refactor org-babel-execute-tangled-ly to smaller chunks
*** DONE ly-determine-app-path refactoring
*** DONE Modify org-babel-execute:lilypond to actually perform tangle
Since ob-lilypond is currently all about tangling, modify C-c C-c
action to perform tangling and subsequent processing. This way we
no longer need to use post-tangle-hook and differentiates between
simple tangling, and tangle + processing.
*** DONE Add command to toggle playing of midi file
*** DONE Add command to toggle displaying pdf file
*** DONE Modify so that given a syntax error ob-lilypond will attempt 
    to highlight the line containing the error in the original
    pre-tangled org file (rather than the generated ly file)
*** DONE Remove the need to explicitly indicate tangled lilypond blocks
This will mean that all lilypond blocks are :tangle: yes by default,
which currently makes sense - enabled by passing in "yes" as tangle
file to org-babel-tangle

*** TODO Decide How to handle OS dependencies
 - midi player
 - pdf viewer
 - LilyPond location (Set up seperate binary paths relative to OS)
 - LilyPond API (OSX needs special treatment at the very least
*** Figure out why Emacs occasionally auto-loads filename.lilypond!
**** DONE Reduced scope of (save-excursion) to avoid this - doesn't help
**** TODO Perhaps need unwind-protection
*** TODO Need to get tests going
*** TODO Take post-tangle hook out of init file and only burden post-tangle hook
    when we are tangling lilypond files
*** SOMEDAY Consider drawing vector graphic output as opposed to pdf for viewing?
*** SOMEDAY Consider the option to embed resultant partial musical output into org file 
    (I did get this working but it looked a little strange)

** Setup
*** Add dev switch hook

#+BEGIN_SRC emacs-lisp
  
  (defun ob-lilypond-switch-src-control-file()
    "Fast route to ob-lilypond.org and back"
    (interactive)
    (let ((project-file 
           (concat dotfiles-dir
                   "martyn/martyn/ob-lilypond/dev/ob-lilypond.org"))
          (buffer))
      (unless (boundp 'me-last-buffer)
              (setq me-last-buffer
                    (concat dotfiles-dir
                            "martyn/martyn/ob-lilypond/lib/ob-lilypond.el")))
      (if (equal (buffer-file-name) project-file)
          (setq buffer me-last-buffer)
        (setq me-last-buffer (buffer-file-name))
        (setq buffer project-file))
      (message (concat "Switching to " buffer))
      (switch-to-buffer  (file-name-nondirectory buffer))))
  (global-set-key [f4] 'ob-lilypond-switch-src-control-file)
    
#+END_SRC
#+results:
: ob-lilypond-switch-src-control-file

*** Add Continuous Testing hook

#+BEGIN_SRC emacs-lisp
  
  (defun ob-lilypond-eval-src-and-tests ()
    (interactive)
    (let ((original-buffer buffer-file-name)
          (original-window (selected-window)))
      (if(string-match "^ob-lilypond" (file-name-nondirectory original-buffer)) 
          (progn
            (eval-buffer "ob-lilypond-tests.el")
            (eval-buffer "ob-lilypond.el")
            (ert t)))
      (select-window original-window)))
  
(add-hook 'after-save-hook 'ob-lilypond-eval-src-and-tests)

#+END_SRC

#+results:
| ob-lilypond-eval-src-and-tests |

*** Remove Continuous Testing Hook

#+BEGIN_SRC emacs-lisp
  
(remove-hook 'after-save-hook 'ob-lilypond-eval-src-and-tests)

#+END_SRC

*** Setup Dev Project

#+BEGIN_SRC emacs-lisp (windows)

  (defun lilypond-project ()
    (interactive)
    (when (fboundp 'unity-mode)
      (unload-feature 'unity-mode t))
    (when (fboundp 'unity-mode-tests)
      (unload-feature 'unity-mode-tests t))
    (add-to-list 'load-path
                 (concat dotfiles-dir  "martyn/martyn/ob-lilypond"))
    (delete-other-windows)
    (split-window-horizontally)
    (windmove-right)
    (find-file "~/.emacs.d/martyn/martyn/ob-lilypond/ob-lilypond.el")
    (windmove-left)
    (find-file "~/.emacs.d/martyn/martyn/ob-lilypond/ob-lilypond-tests.el")
    (switch-to-buffer "ob-lilypond-tests.el")
    (split-window-vertically)
    (switch-to-buffer "*ert*")
    (windmove-down)
    (switch-to-buffer "ob-lilypond-tests.el"))
  
#+END_SRC
#+results:
: lilypond-project


    
 
