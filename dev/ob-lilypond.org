* ob-lilypond
** Setup
*** Setup Dev Project

#+BEGIN_SRC emacs-lisp :results silent
  
  (defun ly-project ()
    (interactive)
  
    (defvar ly-project-name "ob-lilypond.org")
    (defvar ly-src-file-name "ob-lilypond.el")
    (defvar ly-test-file-name "test-ob-lilypond.el")
    (defvar ly-test-org-name "ob-lilypond-test.org")
    (defvar ly-root-relative-to-pf "../")
    (defvar ly-dev-dir "dev/")
    (defvar ly-lisp-dir "lisp/")
    (defvar ly-test-dir "testing/lisp/")
    (defvar ly-example-dir "testing/examples/")
    
    (set-buffer ly-project-name)
    (let ((ly-root (concat 
                    (file-name-directory 
                     (buffer-file-name 
                      (current-buffer)))
                    ly-root-relative-to-pf)))
      (when (fboundp 'unity-mode)
        (unload-feature 'unity-mode t))
      (when (fboundp 'unity-mode-tests)
        (unload-feature 'unity-mode-tests t))
      (find-file (concat ly-root ly-example-dir ly-test-org-name))
      (delete-other-windows)
      (split-window-horizontally)
      (windmove-right)
      (find-file (concat ly-root ly-dev-dir ly-project-name))
      (find-file (concat ly-root ly-lisp-dir ly-src-file-name))
      (windmove-left)
      (find-file (concat ly-root ly-test-dir ly-test-file-name))
      (switch-to-buffer ly-test-file-name)
      (split-window-vertically)
      (switch-to-buffer "*ert*")
      (ly-add-hook)
      (windmove-down)
      (switch-to-buffer ly-test-file-name)
      (global-set-key [f4] 'ly-switch-src-control-file)
      (global-set-key [f8] 'ly-dev-tangle)
      (message (concat (file-name-sans-extension
                        " project setup complete...")))))
  
  (defun ly-switch-src-control-file()
    "Fast route to ob-lilypond.org and back"
    (interactive)
    (let ((project-buffer ly-project-name)
          (buffer))
      (unless (boundp 'ly-last-buffer)
        (setq ly-last-buffer ly-src-file-name))
      (if (equal (buffer-name) project-buffer)
          (setq buffer ly-last-buffer)
        (setq ly-last-buffer (buffer-name))
        (setq buffer project-buffer))
      (message (concat "Switching to " buffer))
      (switch-to-buffer buffer)))
  
  (defun ly-post-save-hook ()
    (let ((original-buffer buffer-file-name)
          (original-window (selected-window)))
      (if(or (string-match 
              ly-src-file-name (file-name-nondirectory original-buffer)) 
             (string-match 
              ly-test-file-name (file-name-nondirectory original-buffer)))
          (progn
            (eval-buffer ly-test-file-name)
            (eval-buffer ly-src-file-name)
            (ert t)))
      (select-window original-window)))
  
  (defun ly-add-hook ()
    (interactive)
    (save-excursion
      (set-buffer ly-src-file-name)
      (save-buffer)
      (set-buffer ly-test-file-name)
      (save-buffer))
    (add-hook 'after-save-hook 'ly-post-save-hook nil nil)
    (set-buffer ly-src-file-name)
    (revert-buffer nil t) 
    (set-buffer ly-test-file-name)
    (revert-buffer nil t))
  
  (defun ly-dev-tangle ()
    (interactive)
    (save-excursion
      (set-buffer "ob-lilypond/test.org")
      (ly-tangle)))
  
  (message "Activate with M-x ly-project")
  
#+END_SRC

*** Remove Continuous Testing Hook

#+BEGIN_SRC emacs-lisp :results silent
  
  (save-excursion
    (set-buffer ly-src-file-name)
    (save-buffer)
    (set-buffer ly-test-file-name)
    (save-buffer))
  (remove-hook 'after-save-hook 'ly-post-save-hook nil)
  (save-excursion
    (set-buffer ly-src-file-name)
    (revert-buffer nil t) 
    (set-buffer ly-test-file-name)
    (revert-buffer nil t))
  
#+END_SRC

*** Display all after save hooks 

#+BEGIN_SRC emacs-lisp :results silent

(message "%S" after-save-hook)
 
#+END_SRC

** Stages
*** DONE Get something working'ish initially
*** DONE Decide directory Structure
*** DONE Decide LilyPond-mode and lilypond-hook integration wrt ob-lilypond
Use seperate hook in ob-lilypond to auto draw / play under preferences
*** DONE Get correct basename on build files
*** DONE Add ob-ly-compile-post-tangle user variable (default t)
If ob-ly-compile-post-tangle flag set compile tangled file
Use defvar rather than defcustom for now

*** DONE Add ob-ly-draw-pdf-post-tangle  user variable (default t)
If ob-ly-draw-pdf-post-tangle is true draw pdf of tangled ly file given the
compilation didn't fail.
Use defvar rather than defcustom for now

*** DONE Add ob-ly-play-midi-post-tangle user variable (default t)
If ob-ly-play-midi-post-tangle is true play generated midi file of tangled ly file given the
compilation didn't fail.
Use defvar rather than defcustom for now
*** DONE Test whether we need to explicitly check for 
    existance of pdf and MIDI files before auto display or play
Done with warnings if lilypond doesn't generate
*** DONE Refactor org-babel-execute-tangled-ly to smaller chunks
*** DONE ly-determine-app-path refactoring
*** DONE Modify org-babel-execute:lilypond to actually perform tangle
Since ob-lilypond is currently all about tangling, modify C-c C-c
action to perform tangling and subsequent processing. This way we
no longer need to use post-tangle-hook and differentiates between
simple tangling, and tangle + processing.
*** DONE Add command to toggle playing of midi file
*** DONE Add command to toggle displaying pdf file
*** DONE Modify so that given a syntax error ob-lilypond will attempt 
    to highlight the line containing the error in the original
    pre-tangled org file (rather than the generated ly file)
*** DONE Remove the need to explicitly indicate tangled lilypond blocks
This will mean that all lilypond blocks are :tangle: yes by default,
which currently makes sense - enabled by passing in "yes" as tangle
file to org-babel-tangle

*** DONE Further Refactor example.org
*** DONE Export html version of example.org and add to repo
*** DONE Add exported link to readme
*** DONE Add ly-toggle-png-generation command
*** DONE Port to Ubuntu
*** TODO Finish tests [42/45]
 1. [X] (defalias 'lilypond-mode 'LilyPond-mode)
 2. [X] list 'org-babel-tangle-lang-exts '("LilyPond" . "ly"))
 3. [X] (defconst ly-version "0.1"
 4. [X] ly-compile-post-tangle t
 5. [X] ly-display-pdf-post-tangle t
 6. [X] ly-play-midi-post-tangle t
 7. [X] ly-OSX-ly-path
 8. [X] ly-OSX-pdf-path "open")
 9. [X] ly-OSX-midi-path "open")
 10. [X] ly-nix-ly-path "/usr/bin/lilypond")
 11. [X] ly-nix-pdf-path "evince")
 12. [X] ly-nix-midi-path "timidity")
 13. [X] ly-win32-ly-path "lilypond")
 14. [X] ly-win32-pdf-path "")
 15. [X] ly-win32-midi-path "")
 16. [X] ly-gen-png nil)
 17. [X] ly-gen-svg nil)
 18. [X] ly-gen-html nil)
 19. [X] ly-use-eps nil)
 20. [X] ly-arrangement-mode)
 21. [ ] org-babel-expand-body:lilypond (body params)
 22. [ ] org-babel-execute:lilypond (body params)
 23. [X] org-babel-prep-session:lilypond (session params)
 24. [ ] ly-execute-tangled-ly ()
 25. [X] ly-compile-lilyfile (file-name)
 26. [X] ly-check-for-compile-error (file-name)
 27. [X] ly-process-compile-error (file-name)
 28. [X] ly-mark-error-line (file-name line)
 29. [X] ly-parse-line-num ()
 30. [X] ly-parse-error-line (file-name lineNo)
 31. [X] ly-attempt-to-open-pdf (file-name)
 32. [X] ly-attempt-to-play-midi (file-name)
 33. [X] ly-determine-ly-path ()
 34. [X] ly-determine-pdf-path ()
 35. [X] ly-determine-midi-path ()
 36. [X] ly-toggle-midi-play ()
 37. [X] ly-toggle-pdf-display ()
 38. [X] ly-toggle-png-generation ()
 39. [X] ly-toggle-html-generation ()
 40. [X] ly-toggle-arrangement-mode ()
 41. [X] (defun ly-version (&optional insert-at-point)
 42. [X] ly-switch-extension (file-name ext)
 43. [X] (provide 'ob-lilypond)
 44. [X] ly-set-header-args (mode)
 45. [X] ly-set-header-args (mode)

*** DONE Figure out export with lower case lilypond restriction
*** DONE Decide How to handle OS dependencies
 - midi player
 - pdf viewer
 - LilyPond location (Set up seperate binary paths relative to OS)
 - LilyPond API (OSX needs special treatment at the very least
*** DONE Remove noise by setting :results . "silent" as lilypond default
*** DONE Figure out why Emacs occasionally auto-loads filename.lilypond!
**** DONE Reduced scope of (save-excursion) to avoid this - doesn't help
**** DONE Perhaps need unwind-protection - causes issues
**** TODO Modify error marking to use absolute block size counting for location
*** DONE Research when an extra option was added to THE FRONT of org-babel-tangle option list
May need a note in docs or a test of version? 
  Put note in README

*** DONE Add examples using org-babel for programmatic note generation
*** WAITING Get feedback from Shelagh regarding direction and current 
*** DONE Add :noweb "yes" and :comments "yes" as lilypond defaults
*** DONE Modify Readme to include paths to examples
*** TODO Add usage information [1/3]
 - [ ] Font-lock fontify in blocks by default
 - [ ] Practical effects of default ob-lilypond header parameters
 - [X] List of commands
*** DONE Post to org mailing list in hope of some feedback
*** TODO How to refactor Ruby stuff in examples for DRY 
Need to work out how to chain babel blocks which are passing parameters.
*** TODO Re-check in Ubuntu
*** TODO Port to a win32 machine
*** TODO Modify error marking / linking to use :headers "yes" [0/5]
By defaulting :headers to "yes" in ob-lilypond I can map error to original
org file more reliably by utilising the link information in the
generated header. 
 - [ ] Consider generating link in *lilypond* build results
 - [ ] Make "syntax marking" optional since we have the link - or remove?
 - [ ] Fall back to the current best guess if :headers "no" is used?
 - [ ] If marking is used, need to expand just the relevant heading
*** TODO Improve examples [1/4]
 - [X] Swap modal-cycle 1 and 2 as 2 is probably the more useful 
 - [ ] Add notes on how modal cycles are generated and there relevance
 - [ ] Would love to add a harmonic series example to 'evolve' major scale
 - [ ] Check Misty - Errol Garner is out of copywright, if not swap with
   "Empathy"

*** DONE Devise a "mode" for generating liypond partials as embedded png images
This is now the default mode
*** TODO Check out lyqi-mode  
*** TODO Arrangement mode [3/4]
 - [X] add var
 - [X] add toggle
 - [ ] add instruction
 - [X] modify header assignment
 - [ ] modify execute command
*** TODO Update readme and readme links to suit new mode
*** TODO ly-versions or ly-settings?

